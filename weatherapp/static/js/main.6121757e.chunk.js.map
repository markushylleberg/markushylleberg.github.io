{"version":3,"sources":["components/FetchCurrentWeather/FetchCurrentWeather.js","components/OverviewDaily/OverviewDaily.js","components/OverviewWeekly/OverviewWeekly.js","components/Panel/Panel.js","pages/AboutPage/AboutPage.js","pages/APIPage/APIPage.js","App.js","index.js"],"names":["FetchCurrentWeather","state","fetchCoordinates","currentLocation","undefined","currentOverview","currentTemp","currentWind","icon","loading","styles","hourly","daily","this","fetchNewData","cond","props","handleWeatherData","fetch","then","response","json","tempRounded","Math","floor","currently","temperature","windRounded","windSpeed","setState","timezone","summary","weatCondition","weatherIconAndStyles","console","log","className","format","ticking","onChange","e","target","value","selected","onClick","Component","OverviewDaily","hourlyData","weatherIcon","arrOfHourData","data","map","hour","index","unixTimestamp","time","floorTemperature","floorWindSpeed","color","key","tz","unix","OverviewWeekly","dailyData","arrIndividualDays","arrOfDailyData","newArr","temperatureHigh","entry","Dashboard","currentWeather","weekly","handleWeatherDataFromDashBoard","hidden","display","size","style","AboutPage","APIPage","App","includes","basename","to","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6121757e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { FaSun, FaCloud, FaCloudRain, FaCloudSun, FaSnowflake } from 'react-icons/fa';\nimport './FetchCurrentWeather.css';\nimport Clock from 'react-live-clock';\n\nexport default class FetchCurrentWeather extends Component {\n\n    state = {\n        fetchCoordinates: '55.679670,12.545873',\n        currentLocation: undefined,\n        currentOverview: undefined,\n        currentTemp: undefined,\n        currentWind: undefined,\n        icon: undefined,\n        loading: true,\n        styles: undefined,\n        hourly: undefined,\n        daily: undefined\n    }\n\n    componentDidMount() {\n        this.fetchNewData();\n    }\n\n    handleWeatherData (cond, hourly, daily) {\n        this.props.handleWeatherData(cond, hourly, daily);\n    }\n\n    async fetchNewData() {\n        await fetch(`https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/e9e67e754b52ca8cfc1cde047026daf7/${this.state.fetchCoordinates}?units=si`)\n            .then(response => response.json())\n            .then(response => {\n\n                const tempRounded = Math.floor(response.currently.temperature);\n                const windRounded = Math.floor(response.currently.windSpeed);\n\n                const weatherIconAndStyles = () => {\n                    const weatCondition = response.currently.icon;\n                        if (weatCondition === 'cloudy') {\n                            this.setState({styles: 'current-weather-wrapper overcast'});\n                            return <FaCloud />\n                        } else if (weatCondition === 'rain') {\n                            this.setState({styles: 'current-weather-wrapper rain'});\n                            return <FaCloudRain />\n                        } else if (weatCondition === 'partly-cloudy-day') {\n                            this.setState({styles: 'current-weather-wrapper partly-cloudy-day'});\n                            return <FaCloudSun />\n                        } else if (weatCondition === 'snow') {\n                            this.setState({styles: 'current-weather-wrapper snow'});\n                            return <FaSnowflake />\n                        } else {\n                            this.setState({styles: 'current-weather-wrapper sun'});\n                            return <FaSun />\n                        }\n                }\n\n    // Set state to hourly and weekly that will later be passed on to Panel\n    // and then pass to the child components OverviewWeekly and OverviewDaily of Panel\n                this.setState({ hourly: response.hourly });\n                this.setState({ daily: response.daily });\n                // console.log(response);\n\n    // Set the defined values in this component's states and set loading to false\n                this.setState({ currentLocation: response.timezone,\n                                currentOverview: response.currently.summary,\n                                currentTemp: tempRounded,\n                                currentWind: windRounded,\n                                icon: weatherIconAndStyles(),\n                                loading: false\n                            })\n                            console.log(response);\n            });\n\n    // Pass data regarding corrent weather to method that pass to parent component \n                this.handleWeatherData(this.state.styles, this.state.hourly, this.state.daily);\n                this.setState({loading: false});\n    };\n    \n    render() {\n\n        const { currentLocation, currentOverview, currentTemp, currentWind, icon, styles } = this.state;\n\n        return (\n            <div className={styles}>\n                <div>\n                    <p>The weather right now</p>\n                    <p><b><Clock format={'HH:mm:ss'} ticking={true} timezone={'Europe/Copenhagen'} /></b></p>\n                    <div className=\"current-weather-container\">\n                        <div className=\"temperature\">\n                            <h2>{ currentTemp+'°' }</h2>\n                            <p>{ currentWind } m/s</p>\n                        </div>\n                        <div className=\"location\">\n                            <div className=\"change-city\">\n                                <select className=\"city-select\" onChange={ (e) => this.setState({fetchCoordinates: e.target.value}) }>\n                                    <option value=\"55.679670,12.545873\" selected>Copenhagen, Denmark</option>\n                                    <option value=\"51.503525,-0.122228\">London, UK</option>\n                                    <option value=\"48.857131,2.350180\">Paris, France</option>\n                                    <option value=\"41.946870,12.494075\">Rome, Italy</option>\n                                    <option value=\"40.623056,-3.925954\">Madrid, Spain</option>\n                                    <option value=\"65.980651,29.198062\">Helsinki, Finland</option>\n                                    <option value=\"33.455134,-112.077027\">Phoenix, Arizona, USA</option>\n                                    <option value=\"64.837059,-147.713640\">Anchorage, Alaska, USA</option>\n                                </select>\n                                <button className=\"change-city-btn\" onClick={ () => this.fetchNewData() }>Change city</button>\n                            </div>\n                            <h3>{ currentLocation }</h3>\n                        </div>\n                        <div className=\"weather-symbol\">\n                            <div>\n                                <h3>{ icon }</h3>\n                                <p>{ currentOverview }</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport Moment from 'react-moment';\nimport { FaCloud, FaSun, FaCloudRain, FaWater, FaCloudSun, FaCloudMoon, FaMoon, FaSnowflake } from 'react-icons/fa';\nimport './OverviewDaily.css';\n\nexport default class OverviewDaily extends Component {\n\n    state = {\n        hourlyData: undefined,\n        loading: true\n    }\n\n    componentWillReceiveProps(props) {\n            this.setState({ loading: false })\n\n            if ( this.state.loading === false ){\n                const arrOfHourData = props.data;\n                let weatherIcon;\n                this.setState({hourlyData: arrOfHourData.map(function (hour, index) {\n\n                        const unixTimestamp = hour.time;\n                        const floorTemperature = Math.floor(hour.temperature);\n                        const floorWindSpeed = Math.floor(hour.windSpeed);\n\n                        if (hour.icon === 'cloudy'){\n                            weatherIcon = <FaCloud color=\"gray\" />;\n                        } else if (hour.icon === 'rain'){\n                            weatherIcon = <FaCloudRain color=\"gray\" />;\n                        } else if (hour.icon === 'fog'){\n                            weatherIcon = <FaWater color=\"gray\" />;\n                        } else if (hour.icon === 'partly-cloudy-day'){\n                            weatherIcon = <FaCloudSun color=\"gray\" />;\n                        } else if (hour.icon === 'partly-cloudy-night'){\n                            weatherIcon = <FaCloudMoon color=\"gray\" />;\n                        } else if (hour.icon === 'clear-night'){\n                            weatherIcon = <FaMoon color=\"gray\" />;\n                        } else if (hour.icon === 'snow') {\n                            weatherIcon = <FaSnowflake color=\"gray\" />;\n                        } else {\n                            weatherIcon = <FaSun color=\"gray\" />;\n                        }\n\n                        return (<div className=\"hourly-entry\" key={index}>\n                                    <p className=\"hourly-entry-day\"><Moment tz=\"Europe/Copenhagen\" format=\"dddd\" unix>{unixTimestamp}</Moment></p>\n                                    <p className=\"hourly-entry-time\"><Moment format=\"HH:mm\" unix>{unixTimestamp}</Moment></p>\n                                    <div className=\"hourly-entry-icon\">{ weatherIcon }</div>\n                                    <p className=\"hourly-entry-temperature\">{floorTemperature}°</p>\n                                    <p className=\"hourly-entry-windspeed\">{floorWindSpeed} m/s</p>\n                                </div>)\n                })\n            })\n            }\n        }\n    \n    render() {\n        return (\n            <div className=\"hourly-wrapper\">\n                <div className=\"hourly-headlines\">\n                    <h2>Short term weather</h2>\n                    <h3>{ this.props.summary }</h3>\n                </div>\n                <div className=\"hourly-container\">{ this.state.hourlyData }</div>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport Moment from 'react-moment';\nimport { FaCloud, FaSun, FaCloudRain, FaWater, FaCloudSun, FaCloudMoon, FaMoon, FaSnowflake } from 'react-icons/fa';\nimport './OverviewWeekly.css';\n\nexport default class OverviewWeekly extends Component {\n\n    state = {\n        dailyData: undefined,\n        arrIndividualDays: [],\n        loading: true\n    }\n\n    componentWillReceiveProps(props) {\n        this.setState({dailyData: props.data, loading: false});\n        if (this.state.dailyData !== undefined) {\n            let arrOfDailyData = this.state.dailyData;\n            let weatherIcon = undefined;\n            let newArr = arrOfDailyData.map( (daily, index) => {\n\n                const unixTimestamp = daily.time;\n                const floorTemperature = Math.floor(daily.temperatureHigh);\n                const floorWindSpeed = Math.floor(daily.windSpeed);\n\n                if (daily.icon === 'cloudy'){\n                    weatherIcon = <FaCloud color=\"gray\" />;\n                } else if (daily.icon === 'rain'){\n                    weatherIcon = <FaCloudRain color=\"gray\" />;\n                } else if (daily.icon === 'fog'){\n                    weatherIcon = <FaWater color=\"gray\" />;\n                } else if (daily.icon === 'partly-cloudy-day'){\n                    weatherIcon = <FaCloudSun color=\"gray\" />;\n                } else if (daily.icon === 'partly-cloudy-night'){\n                    weatherIcon = <FaCloudMoon color=\"gray\" />;\n                } else if (daily.icon === 'clear-night'){\n                    weatherIcon = <FaMoon color=\"gray\" />;\n                } else if (daily.icon === 'snow'){\n                    weatherIcon = <FaSnowflake color=\"gray\" />;\n                } else {\n                    weatherIcon = <FaSun color=\"gray\" />;\n                }\n\n                return <div className=\"daily-entry\" key={index}>\n                            <div className=\"daily-entry-times\">\n                                <p className=\"daily-entry-day\"><Moment tz=\"Europe/Copenhagen\" format=\"dddd\" unix>{unixTimestamp}</Moment></p>\n                                <p className=\"daily-entry-date\"><Moment tz=\"Europe/Copenhagen\" format=\"D. MMMM\" unix>{unixTimestamp}</Moment></p>\n                            </div>\n                            <div className=\"daily-entry-icon\">{ weatherIcon }</div>\n                            <p className=\"daily-entry-temperature\">{floorTemperature}°</p>\n                            <p className=\"daily-entry-windspeed\">{floorWindSpeed} m/s</p>\n                        </div>\n            });\n            this.setState({arrIndividualDays: newArr});\n\n        }\n    }\n    \n    render() {\n\n        return (\n            <div className=\"daily-wrapper\">\n                <div className=\"daily-headlines\">\n                    <h2>Long term weather</h2>\n                    <h3>{ this.props.summary }</h3>\n                </div>\n                <div className=\"daily-container\">\n                    { this.state.arrIndividualDays.map( function (entry) {\n                        return <div>{entry}</div>\n                    }) }\n                </div>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport FetchCurrentWeather from '../FetchCurrentWeather/FetchCurrentWeather';\nimport OverviewDaily from '../OverviewDaily/OverviewDaily';\nimport OverViewWeekly from '../OverviewWeekly/OverviewWeekly';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport './Panel.css';\n\nexport default class Dashboard extends Component {\n\n    state = {\n        currentWeather: undefined,\n        hourlyData: undefined,\n        dailyData: undefined,\n        loading: true\n    }\n\n    handleWeatherData = (cond, hourly, weekly) => {\n        this.setState({currentWeather: cond});\n        this.setState({hourlyData: hourly});\n        this.setState({dailyData: weekly, loading: false});\n\n    // Pass it on to App.js\n        this.handleWeatherDataFromDashBoard(this.state.currentWeather);\n    }\n\n    handleWeatherDataFromDashBoard (cond, hourly, weekly) {\n        this.props.handleWeatherDataFromDashBoard(cond, hourly, weekly);\n    }\n\n    render() {\n\n        const { hourlyData, dailyData, loading } = this.state;\n\n        const hidden = loading ? { display: 'none' } : { display: 'block' };\n\n        return (\n            <div className=\"dashboard-wrapper\">\n            <ClipLoader size={150} color={\"#6d6d6d\"} loading={this.state.loading} />\n                    <div className=\"dashboard-container\" style={ hidden }>\n                        <FetchCurrentWeather handleWeatherData={this.handleWeatherData} />\n                        <OverviewDaily {...hourlyData}  />\n                        <OverViewWeekly {...dailyData}/>\n                    </div>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport './AboutPage.css';\n\nexport default class AboutPage extends Component {\n    render() {\n        return (\n            <div className=\"about-wrapper\">\n                <div className=\"about-container\">\n                    <div className=\"about-headlines\">\n                        <h2>About</h2>\n                    </div>\n                <p>This project has been developed by Markus Hylleberg, who is a student on KEA.</p>\n                <br />\n                <br />\n                <h4>The assignment</h4>\n                <p>The assignment was to research API's that provide data regarding the weather and use the data to develop a panel overviewing the weather.</p>\n                <br />\n                <br />\n                <h4>Learning goals</h4>\n                <p>This assignment was a part of the React elective course on KEA on the spring semester of 2020. At this point of the course we are learning the fundamentals of React. So this project has focused on passing data to different components using props, as well as fetching data and using packages. </p>\n                <br />\n                <br />\n                <h4>Packages</h4>\n                <p>A part of this assignment were also to use packages. Below is a list of the packages used for this project</p>\n                <br />\n                <p>react-router-dom</p>\n                <br />\n                <p>react-moment</p>\n                <br />\n                <p>react-spinners</p>\n                <br />\n                <p>react-live-clock</p>\n                <br />\n                <p>react-icons</p>\n                </div>\n            </div>\n        );\n    }\n} ","import React, { Component } from 'react';\nimport './APIPage.css';\n\nexport default class APIPage extends Component {\n    render() {\n        return (\n            <div className=\"api-wrapper\">\n                <div className=\"api-container\">\n                    <div className=\"api-headlines\">\n                        <h2>The API</h2>\n                        <h3>from Dark Sky</h3>\n                    </div>\n                    <p>This project has been developed by Markus Hylleberg, who is a student on KEA.</p>\n                <br />\n                <br />\n                <h4>Fetching from Dark Sky and CORS</h4>\n                <p>I researched many different Weather API's and when I came across the Dark Sky Weather API I figured I would research further on that API. It turned out to be a heavily supported API with a lot of possitive feedback as well as a lovely dashboard on their website where you can easily see the token and how many times the API with your token has been fetched. I did struggle quite a bit with a CORS error that took me a lot of time to figure out, especially because there is very little support online on how to solve the CORS error on the Dark Sky API.</p>\n                <br />\n                <br />\n                <h4 style={{color: \"green\"}}>Pros using Dark Sky API</h4>\n                <p>The experience working with the Dark Sky API has been very positive. The structure of the data you fetch is very simple. The data is sorted into three categories 'current weather', 'short term' and 'long term' and it makes it very easy to work with. The API contains very much data in general which has been left out of the project for simplicity.</p>\n                <br />\n                <br />\n                <h4 style={{color: \"red\"}}>Cons using Dark Sky API</h4>\n                <p>There aren't very many cons using the Dark Sky API, other than I have at times noticed that it isn't as precise as other weather websites like DMI.dk or YR.no. I would say it is accurate 95% of the time, and then rarely on the last 5% it is just completely wrong.</p>\n                <br />\n                <p>Also in the long term weather (showing the weather for 7 or 8 days ahead) the Dark Sky API concludes \"rain\" for the entire day if there is as much as 0.0001 ml rain at 4AM. and complete sunshine the rest of the day </p>\n                </div>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport Dashboard from './components/Panel/Panel';\nimport AboutPage from './pages/AboutPage/AboutPage';\nimport APIPage from './pages/APIPage/APIPage';\nimport { BrowserRouter as Router, Switch, Route, Link, IndexRoute } from 'react-router-dom';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    currentWeather: undefined,\n    loading: true,\n    styles: 'App'\n  }\n\n  handleWeatherDataFromDashBoard = cond => {\n\n    if (cond.includes('overcast')) {\n        this.setState({styles: 'App cloudy-background'});\n    } else if (cond.includes('rain')) {\n        this.setState({styles: 'App rainy-background'});\n    } else if (cond.includes('partly-cloudy-day')) {\n        this.setState({styles: 'App partly-cloudy-background'});\n    } else if (cond.includes('snow')) {\n        this.setState({styles: 'App snowy-background'});\n    } else {\n        this.setState({styles: 'App sunny-background'});\n    }\n\n    this.setState({currentWeather: cond, loading: false});\n    // console.log('from App.js : '+cond)\n  }\n\n  render() {\n\n    const { styles } = this.state;\n\n    return (\n      <Router basename=\"{'/weatherapp'}\">\n        <div className={styles}>\n              <nav>\n                <ul>\n                  <li>\n                    <Link to=\"/\">Home</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/about\">About</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/api\">API</Link>\n                  </li>\n                </ul>\n              </nav>\n              <Switch>\n                <Route exact path=\"/api\">\n                  <APIPage />\n                </Route>\n\n                <Route exact path=\"/about\">\n                  <AboutPage />\n                </Route>\n\n                <Route path=\"/\">\n                  <Dashboard handleWeatherDataFromDashBoard={this.handleWeatherDataFromDashBoard} />\n                </Route>\n              </Switch>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}